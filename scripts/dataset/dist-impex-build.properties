# -------------------------------------------------------------------
#
#  D A T A B A S E  S E T T I N G S
#
# -------------------------------------------------------------------
# JDBC connection settings. This is used by the JDBCToXML task that
# will create an XML database schema from JDBC metadata. These
# settings are also used by the SQL Ant task to initialize your
# Torque system with the generated SQL.
#
# -------------------------------------------------------------------

# this is where, relative to the <distribution.root>/database/database-impex directory, that the 
# directory containing XML data files for import 
torque.schema.dir=../bootstrap-server-dataset
#
# where to find JDBC drivers for Oracle or MySQL
#
drivers.directory = /java/drivers
drivers.file.pattern=ojdbc*.jar,mysql*.jar

#
# Modify these to match the database into which you are going to import
#
#import.torque.database = oracle
#import.torque.database.driver = oracle.jdbc.OracleDriver
#import.torque.database.url = jdbc:oracle:thin:@localhost:1521:XE
#import.torque.database.user=disttest
#import.torque.database.schema=disttest
#import.torque.database.password=disttest

#
# Uncomment these for a local MySQL database
#
#import.torque.database = mysql
#import.torque.database.driver = com.mysql.jdbc.Driver
#import.torque.database.url = jdbc:mysql://localhost:3306/kuldemo
#import.torque.database.user=kuldemo
#import.torque.database.schema=kuldemo
#import.torque.database.password=kuldemo

# uncomment this to skip some of the larger (and mostly unnecessary) tables in the system
# import.exclude.data.pattern=LD_LDGR_ENTR_T.xml,GL_BALANCE_T.xml,GL_ENTRY_T.xml,LD_LDGR_BAL_T.xml,GL_ACCT_BALANCES_T.xml


# set if you want to use the ant script to set up the users and schemas for the import
# see build.properties for the commands that will be executed

# sample for oracle:
#import.admin.user=kuluser_admin
#import.admin.password=kuluser_admin

# sample for mysql:
#import.admin.user=root
#import.admin.password=????

# this may need to be different if (like in the case of MySQL) there is a schema name on the URL
# admin commands will not run with that URL if the schema has not yet been created
#import.admin.url = ${import.torque.database.url}
# if using MySQL, you will need to remove the schema/database name from the end as below
#import.admin.url=jdbc:mysql://localhost:3306

# these are used by the bootstrapping mechanism
#oracle.usermaint.user=system
#oracle.usermaint.password=????

# SQL statements used for creating and dropping users
# 
# THESE SHOULD NOT NEED TO BE MODIFIED 

# Oracle commands

oracle.drop.user.commands=DECLARE temp NUMBER; BEGIN temp := ${oracle.usermaint.user}.kuluser_maint_pk.drop_user( '${import.torque.database.user}' ); END;

oracle.create.user.commands=DECLARE temp NUMBER; BEGIN temp := ${oracle.usermaint.user}.kuluser_maint_pk.create_user( '${import.torque.database.user}', '${import.torque.database.password}' ); END;

oracle.empty.schema.commands=DECLARE temp NUMBER; BEGIN temp := ${oracle.usermaint.user}.kuluser_maint_pk.recreate_user( '${import.torque.database.user}' ); END;

# MySQL commands

mysql.create.user.command=CREATE USER '${import.torque.database.user}'@'localhost' IDENTIFIED BY '${import.torque.database.password}'

mysql.grant.command=GRANT ALL ON ${import.torque.database.schema}.* TO '${import.torque.database.user}'@'localhost' WITH GRANT OPTION

mysql.create.user.commands=${mysql.create.user.command}    
    
mysql.create.schema.commands=CREATE DATABASE IF NOT EXISTS ${import.torque.database.schema} DEFAULT CHARACTER SET 'utf8' DEFAULT COLLATE 'utf8_bin'\n\
/\n\
${mysql.grant.command}

mysql.drop.schema.commands=DROP DATABASE IF EXISTS ${import.torque.database.schema}

