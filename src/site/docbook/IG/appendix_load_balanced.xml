<?xml version='1.0' encoding='UTF-8'?> 
<appendix xml:id="appendix_load_balanced" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook"  version="5.0">    
    <title>Setting Up a Load-Balanced Clustered Production Environment</title>
    <note><para>These details are repeated from the previous section on running a productionplatform</para></note>
    <para>This describes how to set up Rice instances for a load-balanced production environment
        across multiple computers. <orderedlist>
            <listitem>
                <para>The configuration parameter <emphasis role="bold">${environment}</emphasis>
                    must be set to the text: <emphasis role="bold">prd</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>When the configuration parameter <emphasis role="bold"
                        >${environment}</emphasis> is set to <emphasis role="bold">prd</emphasis>,
                    the code triggers: <orderedlist>
                        <listitem>
                            <para>Sending email to specified individuals </para>
                        </listitem>
                        <listitem>
                            <para>Turning off some of the Rice “back doors” </para>
                        </listitem>
                    </orderedlist></para>
            </listitem>
        </orderedlist></para>
        <para>The high-level process for creating multiple Rice instances:<orderedlist>
            <listitem>
                <para>Ensure that these are set up properly so no additional configuration is needed
                    during installation:<orderedlist>
                        <listitem>
                            <para>Quartz is configured properly for clustering (there are various
                                settings that make this possible). </para>
                        </listitem>
                        <listitem>
                            <para>The initial software setup has the proper configuration to support
                                a clustered production environment. </para>
                        </listitem>
                        <listitem>
                            <para>Rice’s initial settings are in the file,
                                common-config-defaults.xml. </para>
                        </listitem>
                    </orderedlist></para>
                <para>Here are some of the parameters in the common-config-defaults.xml that setup
                    Quartz for clustering:</para>
                <para><programlisting>&lt;param name="useQuartzDatabase" override="false">true&lt;/param>
&lt;param name="ksb.org.quartz.scheduler.instanceId” override="false">AUTO&lt;/param>
&lt;param name="ksb.org.quartz.scheduler.instanceName" override="false">KSBScheduler&lt;/param>
&lt;param name="ksb.org.quartz.jobStore.isClustered" override="false">true&lt;/param>
&lt;param name="ksb.org.quartz.jobStore.tablePrefix" override="false">KRSB_QRTZ_&lt;/param></programlisting></para>
                <para>If it becomes necessary to pass additional parameters to Quartz during rice
                    startup, just add parameters in the <emphasis role="bold"
                        >rice-config.xml</emphasis> file prefixed with<emphasis role="bold">
                        ksb.org.quartz.*</emphasis></para>
                <para>The parameter <emphasis role="bold">useQuartzDatabase</emphasis> MUST be set
                    to <emphasis role="bold">true</emphasis> for Quartz clustering to work. (This is
                    required because it uses the database to accomplish coordination between the
                    different scheduler instances in the cluster.)</para>
            </listitem>
            <listitem>
                <para>Ensure that all service bus endpoint URLs are unique on each machine: Make
                    sure that each Rice server in the cluster has a unique serviceServletUrl
                    parameter in the rice-config.xml configuration file.</para>
                <para>One way to accomplish this is to pass a system parameter into the JVM that
                    runs the Tomcat server that identifies the IP and port number of that particular
                    Tomcat Server. For example: </para>
                <para>
                    <programlisting>-Dhttp.url=129.79.216.156:8806</programlisting>
                </para>
                <para>You can then configure your <emphasis role="bold">serviceServletUrl</emphasis>
                    in the <emphasis role="bold">rice-config.xml</emphasis> to use that IP and port
                    number. </para>
                <para>
                    <programlisting>&lt;param name="serviceServletUrl">http://${http.url}/${app.context.name}/remoting/&lt;/param> </programlisting>
                </para>
                <para>You could have different values for <emphasis role="bold"
                        >serviceServletUrl</emphasis> in the <emphasis role="bold"
                        >rice-config.xml</emphasis> on each machine in the cluster. </para>
            </listitem>
            <listitem>
                <para>If you are using notes and attachments in workflow, then the <emphasis
                        role="bold">attachment.dir.location</emphasis> parameter must point to a
                    shared file system mount (one that is mounted by all machines in the cluster).
                </para>
            </listitem>
            <listitem>
                <para>The specifics of setting up and configuring a shared file system location are
                    part of how you set up your infrastructure environment. Those are beyond the
                    scope of this Guide.</para>
            </listitem>
            <listitem>
                <para>In general, to accomplish a load-balanced clustered environment, you must
                    implement some type of load balancing technology with session affinity (i.e., it
                    keeps the browser client associated with the specific machine in the cluster
                    that it authenticated with). An example of a load balancing appliance-software
                    is the open source product, Zeus.</para>
            </listitem>
        </orderedlist></para>
    
</appendix>
