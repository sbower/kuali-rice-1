<project name="Application Deployer">
  <description>Deploy applications packaged by Maven to a server on EC2</description>
  <property name="deploy.auth" value="${user.home}/${private.key}" />
  <property name="impex.dba.username" value="master" />
  <property name="tomcat.instance.lib.dir" value="/usr/local/${tomcat.instance}/lib" />

  <target name="reset" depends="stop,clean,cleanjdbc,copy,resetdb,start" />
  <target name="restart" depends="stop,clean,start" />
  <target name="waronly" depends="stop,clean,copywar,start" />
  <target name="configonly" depends="stop,clean,copy-appconfig,copy-envconfig,start" />
  <target name="copy" depends="copyjdbc,copyconfig,copywar" />
  <target name="copyconfig" depends="copy-commonconfig,copy-appconfig,copy-envconfig" />

  <property name="config.home" value="/home/${tomcat.instance}/kuali/main/${deploy.environment}" />

  <target name="stop" depends="check-basic-properties">
    <echo>Stopping ${tomcat.instance} on ${deploy.server}</echo>
    <exec executable="ssh" failonerror="false">
      <arg value="-i" />
      <arg value="${deploy.auth}" />
      <arg value="root@${deploy.server}" />
      <arg value="su" />
      <arg value="-" />
      <arg value="${tomcat.instance}" />
      <arg value="/usr/local/tomcat/bin/forced-shutdown.sh" />
    </exec>
  </target>
  <target name="cleanjdbc" depends="check-basic-properties">
    <antcall target="removedir">
      <param name="remote.dir" value="${tomcat.instance.lib.dir}" />
    </antcall>
  </target>
  <target name="clean" depends="check-basic-properties">
    <antcall target="removedir">
      <param name="remote.dir" value="/usr/local/${tomcat.instance}/webapps/ROOT" />
    </antcall>
    <antcall target="runscript">
      <param name="message" value="Cleaning up ${tomcat.instance} on ${deploy.server}" />
      <param name="script" value="/usr/local/tomcat/bin/cleanup.sh" />
    </antcall>
  </target>
  <target name="copy-commonconfig" depends="check-basic-properties">
    <condition property="copy-commonconfig.properties">
      <and>
        <isset property="deploy.config.common" />
      </and>
    </condition>
    <fail unless="copy-commonconfig.properties">Missing deploy.config.common</fail>
    <antcall target="copyfile">
      <param name="local.file" value="${deploy.config.common}" />
      <param name="remote.file" value="${config.home}/common-config.xml" />
    </antcall>
  </target>

  <target name="copy-appconfig" depends="check-basic-properties">
    <condition property="copy-appconfig.properties">
      <and>
        <isset property="deploy.config.app" />
      </and>
    </condition>
    <fail unless="copy-appconfig.properties">Missing deploy.config.app</fail>
    <antcall target="copyfile">
      <param name="local.file" value="${deploy.config.app}" />
      <param name="remote.file" value="${config.home}/${deploy.app.configfile}" />
    </antcall>
  </target>
  <target name="copy-envconfig" depends="check-basic-properties,check-env-config" if="env.config.present">
    <antcall target="copyfile">
      <param name="local.file" value="${deploy.config.env}" />
      <param name="remote.file" value="${config.home}/env-config.xml" />
    </antcall>
  </target>
  <target name="copyjdbc" depends="check-basic-properties">
    <condition property="copyjdbc.properties">
      <and>
        <isset property="jdbc.driver.filename" />
        <isset property="jdbc.driver.location" />
      </and>
    </condition>
    <fail unless="copyjdbc.properties">Missing jdbc driver properties</fail>
    <antcall target="mkdir">
      <param name="remote.dir" value="${tomcat.instance.lib.dir}" />
    </antcall>
    <antcall target="copyfile">
      <param name="local.file" value="${jdbc.driver.location}" />
      <param name="remote.file" value="${tomcat.instance.lib.dir}/${jdbc.driver.filename}" />
    </antcall>
    <antcall target="chowndir">
      <param name="remote.dir" value="${tomcat.instance.lib.dir}" />
    </antcall>
  </target>
  <target name="copywar" depends="check-basic-properties">
    <condition property="copywar.properties">
      <and>
        <isset property="deploy.war" />
      </and>
    </condition>
    <fail unless="copywar.properties">Missing deploy.war</fail>
    <property name="remote.war.file" value="/usr/local/${tomcat.instance}/webapps/ROOT.war" />
    <antcall target="copyfile">
      <param name="local.file" value="${deploy.war}" />
      <param name="remote.file" value="${remote.war.file}" />
    </antcall>
  </target>
  <target name="resetdb">
    <condition property="resetdb.properties">
      <and>
        <isset property="db.vendor" />
        <isset property="impex.dir" />
        <isset property="impex.database" />
        <isset property="impex.url" />
        <isset property="impex.username" />
        <isset property="impex.password" />
        <isset property="impex.dba.url" />
        <isset property="impex.dba.username" />
        <isset property="impex.dba.password" />
      </and>
    </condition>
    <fail unless="resetdb.properties">Missing one or more database properties</fail>
    <echo>Resetting ${db.instance} on ${impex.url}</echo>
    <echo>Impex directory ${impex.dir}</echo>
    <exec executable="mvn" dir="${impex.dir}" failonerror="true">
      <arg value="clean" />
      <arg value="install" />
      <arg value="-Pdb,${db.vendor}" />
      <arg value="-Dimpex.username=${impex.username}" />
      <arg value="-Dimpex.password=${impex.password}" />
      <arg value="-Dimpex.dba.username=${impex.dba.username}" />
      <arg value="-Dimpex.dba.password=${impex.dba.password}" />
      <arg value="-Dimpex.url=${impex.url}" />
      <arg value="-Dimpex.dba.url=${impex.dba.url}" />
      <arg value="-Dimpex.database=${impex.database}" />
    </exec>
  </target>
  <target name="start" depends="check-basic-properties">
    <antcall target="runscript">
      <param name="message" value="Start ${tomcat.instance} on ${deploy.server}" />
      <param name="script" value="/usr/local/tomcat/bin/startup.sh" />
    </antcall>
  </target>
  <target name="removedir">
    <condition property="removedir.properties">
      <and>
        <isset property="remote.dir" />
      </and>
    </condition>
    <fail unless="removedir.properties">Missing remote.dir</fail>
    <echo>Removing ${deploy.server}:${remote.dir}</echo>
    <exec executable="ssh" failonerror="true">
      <arg value="-i" />
      <arg value="${deploy.auth}" />
      <arg value="root@${deploy.server}" />
      <arg value="rm" />
      <arg value="-rf" />
      <arg value="${remote.dir}" />
    </exec>
  </target>
  <target name="copyfile">
    <echo>Copy ${local.file} to ${deploy.server}:${remote.file}</echo>
    <exec executable="scp" failonerror="true">
      <arg value="-i" />
      <arg value="${deploy.auth}" />
      <arg value="${local.file}" />
      <arg value="root@${deploy.server}:${remote.file}" />
    </exec>
    <exec executable="ssh" failonerror="true">
      <arg value="-i" />
      <arg value="${deploy.auth}" />
      <arg value="root@${deploy.server}" />
      <arg value="chown" />
      <arg value="${tomcat.instance}:tomcat" />
      <arg value="${remote.file}" />
    </exec>
  </target>
  <target name="check-env-config">
    <condition property="check-env-config.properties">
      <and>
        <isset property="deploy.config.env" />
      </and>
    </condition>
    <fail unless="check-env-config.properties">Missing deploy.config.env</fail>
    <available file="${deploy.config.env}" property="env.config.present" />
  </target>
  <target name="check-basic-properties">
    <condition property="basic.properties">
      <and>
        <isset property="deploy.server" />
        <isset property="tomcat.instance" />
      </and>
    </condition>
    <fail unless="basic.properties">Missing either deploy.server or tomcat.instance property</fail>
  </target>
  <target name="chowndir">
    <echo>chown -R ${tomcat.instance}:tomcat ${remote.dir}</echo>
    <exec executable="ssh" failonerror="true">
      <arg value="-i" />
      <arg value="${deploy.auth}" />
      <arg value="root@${deploy.server}" />
      <arg value="chown" />
      <arg value="-R" />
      <arg value="${tomcat.instance}:tomcat" />
      <arg value="${remote.dir}" />
    </exec>
  </target>
  <target name="mkdir">
    <echo>Creating ${deploy.server}:${remote.dir}</echo>
    <exec executable="ssh" failonerror="true">
      <arg value="-i" />
      <arg value="${deploy.auth}" />
      <arg value="root@${deploy.server}" />
      <arg value="mkdir" />
      <arg value="${remote.dir}" />
    </exec>
  </target>
  <target name="runscript">
    <echo>${message}</echo>
    <exec executable="ssh" failonerror="true">
      <arg value="-i" />
      <arg value="${deploy.auth}" />
      <arg value="root@${deploy.server}" />
      <arg value="su" />
      <arg value="-" />
      <arg value="${tomcat.instance}" />
      <arg value="${script}" />
    </exec>
  </target>
</project>